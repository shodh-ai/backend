name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main  # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout your repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set execute permission for mvnw
      - name: Set Maven Wrapper Permissions
        run: chmod +x mvnw

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 4: Build the application with proper environment variables
      - name: Build Application with Maven
        run: |
          ./mvnw package -DskipTests

      # Step 5: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Build, tag, and push the Docker image to ECR
      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          LATEST_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          echo "Building Docker image..."
          docker build -t ${ECR_REPOSITORY}:${IMAGE_TAG} .
          echo "Tagging images..."
          docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${IMAGE_URI}
          docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${LATEST_URI}
          echo "Pushing images to ECR..."
          docker push ${IMAGE_URI}
          docker push ${LATEST_URI}
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV

      # Step 7: Fill in the new image ID in the Amazon ECS task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: backend-container
          image: ${{ env.IMAGE_URI }}

      # Step 8: Deploy Amazon ECS task definition and update service
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: backend-servicealb
          cluster: backend-cluster1
          wait-for-service-stability: true