
name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main  # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Build, Tag, and Push the Docker Image to ECR
      - name: Build, Tag, and Push Docker Image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: latest
        run: |
          # Construct the ECR image URI
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/backend-api:${IMAGE_TAG}"
          echo "Building Docker image..."
          docker build -t backend-api .
          echo "Tagging image as ${IMAGE_URI}..."
          docker tag backend-api:latest $IMAGE_URI
          echo "Pushing image to ECR..."
          docker push $IMAGE_URI
          # Export the image URI for later steps
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # Step 4: Update ECS Task Definition and Deploy the Service
      - name: Update ECS Task Definition and Deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json  # Ensure this file is in your repo
          service: backend-service            # Your ECS service name
          cluster: backend-cluster            # Your ECS cluster name
          wait-for-service-stability: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
